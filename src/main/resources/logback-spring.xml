<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <logger name="jdbc" level="OFF"/>                   <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc.connection" level="OFF"/>        <!-- connection open close 이벤트를 로그로 남긴다. -->

    <logger name="jdbc.sqlonly" level="OFF"/>           <!-- SQL 문만을 로그로 남기며, PreparedStatement 일 경우 관련된 argument 값으로 대체된 SQL 문이 보여진다. -->

    <logger name="jdbc.sqltiming" level="DEBUG"/>       <!-- SQL 문과 해당 SQL 을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->

    <logger name="jdbc.audit" level="OFF"/>             <!-- ResultSet 외 모든 JDBC 호출 정보를 로깅할지 결정한다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->

    <logger name="jdbc.resultset" level="OFF"/>         <!-- ResultSet 포함 모든 JDBC 호출 정보를 로깅한다. 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultsettable" level="INFO"/>   <!-- SQL 결과 조회된 데이터의 table 을 로그로 남긴다. -->

    <!-- use Spring default values -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!-- 콘솔 출력 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="ON" additivity="false">
        <appender-ref ref="CONSOLE"/>
    </logger>

    <root level="INFO"> <!-- DEBUG -->
        <appender-ref ref="CONSOLE"/> <!-- 콘솔 출력 -->
    </root>
</configuration>